{"version":3,"sources":["components/Header.jsx","components/Rating.jsx","components/MovieCard.jsx","components/MovieList.jsx","components/SearchBar.jsx","components/AddMovie.jsx","components/MovieLibrary.jsx","data.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","React","Component","Rating","rating","this","props","data-testid","MovieCard","movie","title","subtitle","storyline","imagePath","alt","src","MovieList","movies","map","key","SearchBar","action","htmlFor","id","type","name","value","searchText","onChange","onSearchTextChange","checked","bookmarkedOnly","onBookmarkedChange","style","marginLeft","selectedGenre","onSelectedGenreChange","AddMovie","state","genre","updateState","bind","submit","event","target","setState","preventDefault","addNewMovie","cols","rows","onClick","MovieLibrary","searchTextInput","updateMoviesByText","bookmarkedOnlyInput","updateMoviesByCheckbox","selectedGenreInput","updateMoviesByGenre","newList","filter","toLowerCase","includes","atualState","previousState","bookmarked","App","data","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3f4f1dbd.chunk.js","sourcesContent":["import React from 'react';\n\nclass Header extends React.Component {\n  render() {\n    return (\n      <header className=\"movie-card-header\">\n        <h1 className=\"page-title\">Movie Cards Library</h1>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React from 'react';\n\nclass Rating extends React.Component {\n  render() {\n    const { rating } = this.props;\n    return (\n      <div className=\"movie-card-rating\" data-testid=\"rating\">\n        <span className=\"rating\">{rating}</span>\n      </div>\n    );\n  }\n}\n\nexport default Rating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Rating from './Rating';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie } = this.props;\n    const { title, subtitle, storyline, rating, imagePath } = movie;\n    return (\n      <div data-testid=\"movie-card\">\n        <div className=\"movie-card\">\n          <img alt=\"Movie Cover\" className=\"movie-card-image\" src={imagePath} />\n          <div className=\"movie-card-body\">\n            <h4 data-testid=\"movie-card-title\" className=\"movie-card-title\">\n              {title}\n            </h4>\n            <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n            <p className=\"movie-card-storyline\">{storyline}</p>\n          </div>\n          <Rating rating={rating} />\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    subtitle: PropTypes.string,\n    storyline: PropTypes.string,\n    rating: PropTypes.number,\n    imagePath: PropTypes.string,\n    bookmarked: PropTypes.bool,\n    genre: PropTypes.string,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MovieCard from './MovieCard';\n\nclass MovieList extends React.Component {\n  render() {\n    const { movies } = this.props;\n\n    return (\n      <div data-testid=\"movie-list\" className=\"movie-list\">\n        {movies.map((movie) => (\n          <MovieCard key={movie.title} movie={movie} />\n        ))}\n      </div>\n    );\n  }\n}\n\nMovieList.propTypes = { movies: PropTypes.arrayOf(PropTypes.object).isRequired };\n\nexport default MovieList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass SearchBar extends React.Component {\n  render() {\n    return (\n      <form action=\"\" data-testid=\"search-bar-form\">\n        <label htmlFor=\"text-input\" data-testid=\"text-input-label\">\n          Inclui o texto:{' '}\n          <input\n            id=\"text-input\"\n            type=\"text\"\n            name=\"searchText\"\n            value={this.props.searchText}\n            onChange={this.props.onSearchTextChange}\n            data-testid=\"text-input\"\n          />\n        </label>\n        <br />\n        <label htmlFor=\"checkbox-input\" data-testid=\"checkbox-input-label\">\n          Mostrar somente favoritos{' '}\n          <input\n            id=\"checkbox-input\"\n            type=\"checkbox\"\n            name=\"bookmarkedOnly\"\n            checked={this.props.bookmarkedOnly}\n            onChange={this.props.onBookmarkedChange}\n            data-testid=\"checkbox-input\"\n          />\n        </label>\n        <br />\n        <label htmlFor=\"select-input\" data-testid=\"select-input-label\">\n          Filtrar por gênero:\n          <select\n            style={{ marginLeft: 10 }}\n            name=\"selectedGenre\"\n            value={this.props.selectedGenre}\n            onChange={this.props.onSelectedGenreChange}\n            id=\"select-input\"\n            data-testid=\"select-input\"\n          >\n            <option value=\"\" data-testid=\"select-option\">\n              Todos\n            </option>\n            <option value=\"action\" data-testid=\"select-option\">\n              Ação\n            </option>\n            <option value=\"comedy\" data-testid=\"select-option\">\n              Comédia\n            </option>\n            <option value=\"thriller\" data-testid=\"select-option\">\n              Suspense\n            </option>\n          </select>\n        </label>\n      </form>\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  searchText: PropTypes.func,\n  onSearchTextChange: PropTypes.func.isRequired,\n  bookmarkedOnly: PropTypes.func,\n  onBookmarkedChange: PropTypes.func.isRequired,\n  selectedGenre: PropTypes.func,\n  onSelectedGenreChange: PropTypes.func.isRequired,\n};\n\nexport default SearchBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass AddMovie extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    };\n    this.updateState = this.updateState.bind(this);\n    this.submit = this.submit.bind(this);\n  }\n  updateState(event) {\n    const { target } = event;\n    this.setState({ [target.name]: target.value });\n  }\n  submit(event) {\n    event.preventDefault();\n    const { addNewMovie } = this.props\n    const newMovie = this.state;\n    addNewMovie(newMovie);\n    this.setState({\n      subtitle: '',\n      title: '',\n      imagePath: '',\n      storyline: '',\n      rating: 0,\n      genre: 'action',\n    });\n  }\n  render() {\n    return (\n      <form action=\"\" data-testid=\"add-movie-form\">\n        <label htmlFor=\"title-input\" data-testid=\"title-input-label\">\n          Título{' '}\n          <input\n            id=\"title-input\"\n            type=\"text\"\n            name=\"title\"\n            value={this.state.title}\n            data-testid=\"title-input\"\n            onChange={this.updateState}\n          />\n        </label>\n        <br />\n        <label htmlFor=\"subtitle-input\" data-testid=\"subtitle-input-label\">\n          Subtítulo{' '}\n          <input\n            id=\"subtitle-input\"\n            type=\"text\"\n            name=\"subtitle\"\n            onChange={this.updateState}\n            value={this.state.subtitle}\n            data-testid=\"subtitle-input\"\n          />\n        </label>\n        <br />\n        <label htmlFor=\"image-input\" data-testid=\"image-input-label\">\n          Imagem{' '}\n          <input\n            id=\"image-input\"\n            type=\"text\"\n            name=\"imagePath\"\n            onChange={this.updateState}\n            value={this.state.imagePath}\n            data-testid=\"image-input\"\n          />\n        </label>\n        <br />\n        <label htmlFor=\"storyline-input\" data-testid=\"storyline-input-label\">\n          Sinopse{' '}\n          <textarea\n            name=\"storyline\"\n            onChange={this.updateState}\n            id=\"storyline-input\"\n            cols=\"30\"\n            rows=\"10\"\n            value={this.state.storyline}\n            data-testid=\"storyline-input\"\n          />\n        </label>\n        <br />\n        <label htmlFor=\"rating-input\" data-testid=\"rating-input-label\">\n          Avaliação{' '}\n          <input\n            id=\"rating-input\"\n            type=\"number\"\n            name=\"rating\"\n            onChange={this.updateState}\n            value={this.state.rating}\n            data-testid=\"rating-input\"\n          />\n        </label>\n        <br />\n        <label htmlFor=\"genre-input\" data-testid=\"genre-input-label\">\n          Gênero\n          <select\n            style={{ marginLeft: 10 }}\n            name=\"genre\"\n            onChange={this.updateState}\n            id=\"genre-input\"\n            data-testid=\"genre-input\"\n            value={this.state.genre}\n          >\n            <option value=\"action\" data-testid=\"genre-option\">Ação</option>\n            <option value=\"comedy\" data-testid=\"genre-option\">Comédia</option>\n            <option value=\"thriller\" data-testid=\"genre-option\">Suspense</option>\n          </select>\n        </label>\n        <button data-testid=\"send-button\" onClick={this.submit}>\n          Adicionar filme\n        </button>\n      </form>\n    );\n  }\n}\n\nAddMovie.propTypes = { addNewMovie: PropTypes.func.isRequired };\n\nexport default AddMovie;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MovieList from './MovieList';\nimport SearchBar from './SearchBar';\nimport AddMovie from './AddMovie';\n\n\nclass MovieLibrary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchText: '',\n      bookmarkedOnly: false,\n      selectedGenre: '',\n      movies: props.movies,\n    };\n    this.searchTextInput = this.searchTextInput.bind(this);\n    this.updateMoviesByText = this.updateMoviesByText.bind(this);\n    this.bookmarkedOnlyInput = this.bookmarkedOnlyInput.bind(this);\n    this.updateMoviesByCheckbox = this.updateMoviesByCheckbox.bind(this);\n    this.selectedGenreInput = this.selectedGenreInput.bind(this);\n    this.updateMoviesByGenre = this.updateMoviesByGenre.bind(this);\n    this.addNewMovie = this.addNewMovie.bind(this);\n  }\n  searchTextInput(event) {\n    const { target } = event;\n    this.setState(\n      { [target.name]: target.value },\n      this.updateMoviesByText,\n    );\n  }\n  bookmarkedOnlyInput(event) {\n    const { target } = event;\n    this.setState(\n      { [target.name]: target.checked },\n      this.updateMoviesByCheckbox,\n    );\n  }\n  updateMoviesByText() {\n    const newList = this.state.movies.filter((movie) =>\n      movie.title.toLowerCase().includes(this.state.searchText.toLowerCase()) ||\n      movie.subtitle.toLowerCase().includes(this.state.searchText.toLowerCase()) ||\n      movie.storyline.toLowerCase().includes(this.state.searchText.toLowerCase())\n    );\n    this.setState({ movies: newList });\n    if (this.state.searchText === '') {\n      this.setState({ movies: this.props.movies });\n    }\n  }\n\n  selectedGenreInput(event) {\n    const { target } = event;\n    this.setState(\n      { [target.name]: target.value },\n      this.updateMoviesByGenre,\n    );\n  }\n\n  updateMoviesByGenre() {\n    if (this.state.selectedGenre === '') {\n      return this.setState({ movies: this.props.movies });\n    }\n    this.setState({ movies: this.props.movies }, () => {\n      const atualState = this.state.selectedGenre\n      const newList = this.state.movies.filter(\n        (movie) => movie.genre === atualState,\n      );\n      this.setState({ movies: newList });\n    });\n  }\n  addNewMovie(movie) {\n    this.setState((previousState) => ({ movies: [...previousState.movies, movie] }));\n  }\n\n  updateMoviesByCheckbox() {\n    if (this.state.bookmarkedOnly === true) {\n      const newList = this.state.movies.filter((movie) => movie.bookmarked === true);\n      this.setState({ movies: newList });\n    } else if (this.state.bookmarkedOnly === false) {\n      this.setState({ movies: this.props.movies });\n    }\n  }\n  render() {\n    return (\n      <div>\n        <SearchBar\n          searchText={this.searchText}\n          onSearchTextChange={this.searchTextInput}\n          bookmarkedOnly={this.bookmarkedOnly}\n          onBookmarkedChange={this.bookmarkedOnlyInput}\n          selectedGenre={this.selectedGenre}\n          onSelectedGenreChange={this.selectedGenreInput}\n        />\n        <MovieList movies={this.state.movies} />\n        <AddMovie addNewMovie={this.addNewMovie} />\n      </div>\n    );\n  }\n}\n\nMovieLibrary.propTypes = { movies: PropTypes.array.isRequired };\n\nexport default MovieLibrary;\n","const movies = [\n  {\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import React from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport MovieLibrary from './components/MovieLibrary';\nimport data from './data';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <MovieLibrary movies={data} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}